cmake_minimum_required(VERSION 3.20) 
project(souleater)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)


# Dependencies
set(RAYLIB_VERSION 5.0)
find_package(raylib ${RAYLIB_VERSION} QUIET) # QUIET or REQUIRED
if (NOT raylib_FOUND) # If there's none, fetch and build raylib
  include(FetchContent)
  FetchContent_Declare(
    raylib
    DOWNLOAD_EXTRACT_TIMESTAMP OFF
    URL https://github.com/raysan5/raylib/archive/refs/tags/${RAYLIB_VERSION}.tar.gz
  )
  FetchContent_GetProperties(raylib)
  if (NOT raylib_POPULATED) # Have we downloaded raylib yet?
    set(FETCHCONTENT_QUIET NO)
    FetchContent_Populate(raylib)
    set(BUILD_EXAMPLES OFF CACHE BOOL "" FORCE) # don't build the supplied examples
    add_subdirectory(${raylib_SOURCE_DIR} ${raylib_BINARY_DIR})
  endif()
endif()

set(YAMLCPP_VERSION 0.8.0)
find_package(yaml-cpp ${YAMLCPP_VERSION} QUIET) # QUIET or REQUIRED
if (NOT yaml-cpp_FOUND) # If there's none, fetch and build yaml-cpp
  include(FetchContent)
  FetchContent_Declare(
    yaml-cpp
    DOWNLOAD_EXTRACT_TIMESTAMP OFF
    URL https://github.com/jbeder/yaml-cpp/archive/refs/tags/${YAMLCPP_VERSION}.tar.gz
  )
  FetchContent_GetProperties(yaml-cpp)
  if (NOT yaml-cpp_POPULATED) # Have we downloaded yaml-cpp yet?
    set(FETCHCONTENT_QUIET NO)
    FetchContent_Populate(yaml-cpp)
    set(BUILD_EXAMPLES OFF CACHE BOOL "" FORCE) # don't build the supplied examples
    add_subdirectory(${yaml-cpp_SOURCE_DIR} ${yaml-cpp_BINARY_DIR})
    include_directories(${yaml-cpp_SOURCE_DIR}/include/)
  endif()
endif()


set(RRES_VERSION 1.2.0)
find_package(rres ${RRES_VERSION} QUIET) # QUIET or REQUIRED
if (NOT rres_FOUND) # If there's none, fetch and build rres
  include(FetchContent)
  FetchContent_Declare(
    rres
    DOWNLOAD_EXTRACT_TIMESTAMP OFF
    URL https://github.com/raysan5/rres/archive/refs/tags/${RRES_VERSION}.tar.gz
  )
  FetchContent_GetProperties(rres)
  if (NOT rres_POPULATED) # Have we downloaded rres yet?
    set(FETCHCONTENT_QUIET NO)
    FetchContent_Populate(rres)
    set(BUILD_EXAMPLES OFF CACHE BOOL "" FORCE) # don't build the supplied examples
    file(COPY ${rres_SOURCE_DIR}/src/external DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/src/rres)
    file(COPY ${rres_SOURCE_DIR}/src/rres-raylib.h DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/src/rres)
    file(COPY ${rres_SOURCE_DIR}/src/rres.h DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/src/rres)
    
    include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src/rres)
    
    # create file with content
    file(WRITE ${CMAKE_CURRENT_SOURCE_DIR}/src/rres/rres.c "#pragma warning(disable : 4996)\n#include <raylib.h>\n#define RRES_IMPLEMENTATION\n#include <rres.h>\n#define RRES_RAYLIB_IMPLEMENTATION\n#include <rres-raylib.h>")
  endif()
endif()

    

# If there is none fetch raygui.h
if (NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/src/raygui/raygui.h)
    file(DOWNLOAD https://raw.githubusercontent.com/raysan5/raygui/master/src/raygui.h ${CMAKE_CURRENT_SOURCE_DIR}/src/raygui/raygui.h)
    file(WRITE ${CMAKE_CURRENT_SOURCE_DIR}/src/raygui/raygui.c "#define RAYGUI_IMPLEMENTATION\n#include <raygui.h>")
endif()



include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src/raygui)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src/**/*)

file(GLOB_RECURSE SOURCES "src/*.cpp" "src/*.c" "src/*.h" "src/*.hpp")

set(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin)
file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/resources DESTINATION ${EXECUTABLE_OUTPUT_PATH})
file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/resources DESTINATION ${CMAKE_CURRENT_BINARY_DIR})

add_executable(${PROJECT_NAME} ${SOURCES})
#set(raylib_VERBOSE 1)
target_link_libraries(${PROJECT_NAME} raylib yaml-cpp)

# Web Configurations
#Â if (${PLATFORM} STREQUAL "Web")
    # Tell Emscripten to build an example.html file.
#    set_target_properties(${PROJECT_NAME} PROPERTIES SUFFIX ".html")
# endif()

# Checks if OSX and links appropriate frameworks (Only required on MacOS)
if (APPLE)
  target_link_libraries(${PROJECT_NAME} "-framework IOKit")
  target_link_libraries(${PROJECT_NAME} "-framework Cocoa")
  target_link_libraries(${PROJECT_NAME} "-framework OpenGL")
endif()

if(UNIX AND NOT APPLE)
  target_link_libraries(${PROJECT_NAME} uuid)
endif()



add_custom_target(run
    COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/bin/${PROJECT_NAME}
    DEPENDS ${PROJECT_NAME}
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    COMMENT "Running ${PROJECT_NAME}"
)
